name: CI/CD for Producers and Consumers

on:
  push:
    paths:
      - "event_producers/**"
      - "consumers/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script_type: [producer, consumer]
        script_name: [
          "cart",
          "cart_items",
          "order",
          "order_items",
          "product_view",
          "session",
          "support_tickets",
          "ticket_messages",
          "wishlists"
        ]

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Set the image name dynamically
      - name: Set Docker image name
        run: echo "IMAGE_NAME=${{ matrix.script_name }}-${{ matrix.script_type }}" >> $GITHUB_ENV

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -f Dockerfile.${{ matrix.script_type }}.prod \
            --build-arg ${{
              matrix.script_type == 'producer' && 'PRODUCER_SCRIPT' || 'CONSUMER_SCRIPT'
            }}=${{ matrix.script_name }}_${{ matrix.script_type }}.py \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest .

      # Step 5: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

      # Step 6: Deploy to ECS
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${CLUSTER_NAME} \
            --service $IMAGE_NAME-service \
            --force-new-deployment
