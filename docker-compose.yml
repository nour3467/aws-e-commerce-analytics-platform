version: '3.8'

services:

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin_password
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./storage/migrations/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - ./storage/migrations/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    entrypoint: ["/docker-entrypoint-initdb.d/entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker Service
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI Service
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  # Event Producers
  session-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: python data_generators/event_producers/session_producer.py

  product-view-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      session-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/product_view_producer.py

  cart-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      session-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/cart_producer.py

  cart-items-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      cart-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/cart_items_producer.py

  orders-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      cart-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/orders_producer.py

  order-items-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      orders-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/order_items_producer.py

  support-tickets-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      orders-producer:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: python data_generators/event_producers/support_tickets_producer.py

  ticket-messages-producer:
    build:
      context: .
      dockerfile: Dockerfile.produce
    depends_on:
      support-tickets-producer:
        condition: service_started
    networks:
      - app-network
    command: python data_generators/event_producers/ticket_messages_producer.py


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    name: postgres_data
